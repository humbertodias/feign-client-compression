#syntax=docker/dockerfile:1

FROM debian as graalvm
ARG GRAALVM_JAVA_VERSION=22.3.1.r17-grl
SHELL ["/bin/bash", "-c"]
# For SDKMAN to work we need unzip & zip
RUN apt update -y && apt install unzip zip curl build-essential libz-dev zlib1g-dev -y
RUN \
    # Install SDKMAN
    curl -sk "https://get.sdkman.io" | bash  ; \
    source $HOME/.sdkman/bin/sdkman-init.sh ; \
    sdk install java $GRAALVM_JAVA_VERSION ; \
    sdk install gradle ; \
    # Install GraalVM Native Image
    gu install native-image  ; \
    gradle --version ; \
    native-image --version

FROM graalvm as build
SHELL ["/bin/bash", "-c"]

ADD . /build
WORKDIR /build

RUN \
    # Build
    source $HOME/.sdkman/bin/sdkman-init.sh ; \
    gradle :client:build ; \
    cd client/build ; rm -rf native ; mkdir native ; cd native ; jar xvf ../libs/client-0.0.1-SNAPSHOT.jar ; \
    CP=BOOT-INF/classes:`find BOOT-INF/lib | tr '\n' ':'` ; \
    MAINCLASS=com.example.demo.DemoApplication ; \
    ARTIFACT=client ; \
    GRAALVM_VERSION=`native-image --version` ; \
    echo "[-->] Compiling Spring Boot App '$ARTIFACT' with $GRAALVM_VERSION" ; \
    native-image \
      --no-fallback \
      -J-Xmx4G \
      -H:Name=$ARTIFACT \
      -H:+ReportExceptionStackTraces \
      -Dspring.graal.remove-unused-autoconfig=true \
      -Dspring.graal.remove-yaml-support=true \
      -cp $CP $MAINCLASS;

# We use a Docker multi-stage build here in order to only take the compiled native Spring Boot App from the first build container
FROM debian as runtime
ENV PORT=9090
# Add Spring Boot Native app spring-boot-graal to Container
COPY --from=build "/build/client/build/native/client" client
# Fire up our Spring Boot Native app by default
CMD [ "sh", "-c", "./client -Dserver.port=$PORT" ]

# https://blog.codecentric.de/spring-boot-graalvm-native-image-maven-plugin
# https://blog.codecentric.de/spring-boot-graalvm